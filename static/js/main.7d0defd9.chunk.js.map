{"version":3,"sources":["logic/rowHandler.ts","logic/constants.ts","Components/Footer/Footer.tsx","Components/Header/Header.tsx","Components/List/List.tsx","Components/Sheet/Sheet.tsx","logic/stores.ts","Components/Destiny/Destiny.tsx","logic/endpoint.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RowHandler","order","MAX_HEIGHT_HEADER","MAX_HEIGHT","orderGroups","getTotalQty","totalQty","order_lines","quantity","this","lineHeight","totalPages","page","accHeight","currOrderGroup","order_details","orderLine","descHeight","Math","ceil","name","length","brandHeight","cats","split","qtyHeight","String","max","orderLineGroup","push","getHeight","pop","Footer","getFirstName","fullName","nameWords","Header","store","className","datetime","style","height","username","colSpan","partner_name","partner_ref","List","HEADER_HEIGHT","map","line","idx","Sheet","orderGroup","stores","id","Destiny","updateStore","value","onChange","getPurchaseOrder","urlParams","a","model","get","endpoint","params","headers","fetch","json","response","statusCode","orderDetails","orderLines","console","log","App","useState","setStore","setOrderGroups","setTotalQty","fetchOrder","URLSearchParams","window","location","search","rowHandler","getGroups","useEffect","e","newId","Number","target","newStore","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QA2BaA,EAAb,WAKE,WAAYC,GAAe,IAAD,gCAJ1BC,kBAAoB,IAIM,KAH1BC,WAAa,IAGa,KAF1BF,WAE0B,OAD1BG,YAA+B,GACL,KA+D1BC,YAAc,WACZ,IADkB,EACdC,EAAW,EADG,cAEC,EAAKL,MAAMM,aAFZ,IAElB,4BAA2CD,GAA3C,QAA4DE,UAF1C,8BAGlB,OAAOF,GAjEPG,KAAKR,MAAQA,EANjB,6CASE,SAAkBS,GAChB,OCrCuB,GDqCFA,ECpCK,ID0B9B,uBAaE,WAKED,KAAKL,YAAc,GACnB,IANU,EAMNO,EAAa,EACbC,EAAO,EACPC,EAAY,EACZC,EAAgC,CAClCC,cAAc,2BAAMN,KAAKR,MAAMc,eAAlB,IAAiCH,OAAMD,WAAY,IAChEJ,YAAa,IAXL,cAacE,KAAKR,MAAMM,aAbzB,IAaV,2BAAgD,CAAC,IAAtCS,EAAqC,QACxCC,EAAaC,KAAKC,KAAKH,EAAUI,KAAKC,OAbvB,IAcfC,EAAcJ,KAAKC,KACvBH,EAAUO,KAAKC,MAAM,OAAO,GAAGH,OAdX,IAgBhBI,EAAYP,KAAKC,KACrBO,OAAOV,EAAUR,UAAUa,OAhBT,GAkBdX,EAAaQ,KAAKS,IAAIV,EAAYK,EAAaG,GAC/CG,EAAiC,2BAClCZ,GADkC,IAErCN,eAEFI,EAAeP,YAAYsB,KAAKD,IAChCf,GAAaJ,KAAKqB,UAAUpB,KAGE,IAA5BD,KAAKL,YAAYiB,OACbZ,KAAKP,kBACLO,KAAKN,cAETW,EAAeP,YAAYwB,MAC3BtB,KAAKL,YAAYyB,KAAKf,GAEtBF,IACAD,GAAc,EACdE,EAAYJ,KAAKqB,UAAUF,EAAelB,YAC1CI,EAAiB,CACfC,cAAc,2BAAMN,KAAKR,MAAMc,eAAlB,IAAiCH,OAAMD,WAAY,IAChEJ,YAAa,CAACqB,MA1CV,8BA8CNd,EAAeP,YAAYc,OAAS,IACtCZ,KAAKL,YAAYyB,KAAKf,GACtBH,GAAc,GAhDN,oBAkDeF,KAAKL,aAlDpB,IAkDV,oCACaW,cAAcJ,WAAaA,GAnD9B,8BAoDV,OAAOF,KAAKL,gBAjEhB,K,OErBa4B,EAAS,SAAC,GAAoC,IAAlCjB,EAAiC,EAAjCA,cACvB,OACE,6CACUA,EAAcH,KADxB,OACkCG,EAAcJ,eCC9CsB,EAAe,SAACC,GACpB,IAAMC,EAAYD,EAASV,MAAM,KACjC,OAAIW,EAAUd,OAAS,EAAS,GAAN,OAAUc,EAAU,GAApB,YAA0BA,EAAU,IACvDD,GAGIE,EAAS,SAAC,GAAqD,IAAnDrB,EAAkD,EAAlDA,cAAeT,EAAmC,EAAnCA,SAAU+B,EAAyB,EAAzBA,MAChD,OACE,sBAAKC,UAAU,2CAAf,UACE,qBAAIA,UAAU,wBAAd,UACE,+BAAOvB,EAAcK,OADvB,YAGE,+BAAOL,EAAcwB,cAEC,IAAvBxB,EAAcH,MACb,sBAAK0B,UAAU,YAAf,UACE,qBACEA,UAAU,0BACVE,MAAO,CAAEC,OAAO,GAAD,OF1BE,IE0BF,OAFjB,SAIE,uBAAOH,UAAU,SAAjB,SACE,kCACE,+BACE,oBAAIA,UAAU,2BAAd,yBACA,6BAAKL,EAAalB,EAAc2B,eAElC,+BACE,oBAAIJ,UAAU,2BAAd,4BACA,oBAAIA,UAAU,6BAEhB,+BACE,oBAAIA,UAAU,2BAAd,sBACA,qFAIF,+BACE,oBAAIA,UAAU,2BAAd,mBACA,4FAOR,qBACEA,UAAU,0BACVE,MAAO,CAAEC,OAAO,GAAD,OFvDE,IEuDF,OAFjB,SAIE,gCACE,kCACE,6BACE,oBAAIE,QAAS,EAAGL,UAAU,2BAA1B,SACGvB,EAAc6B,iBAGnB,+BACE,oBAAIN,UAAU,qCAAd,sBAGA,6BAAKvB,EAAc8B,iBAErB,+BACE,oBAAIP,UAAU,qCAAd,6BAGA,6BAAKhC,OAEP,+BACE,oBAAIgC,UAAU,qCAAd,sBAGA,6BAAKD,EAAMjB,wBCnEhB0B,EAAO,SAAC,GAA+C,IAA7C/B,EAA4C,EAA5CA,cAAeR,EAA6B,EAA7BA,YACpC,OACE,sBACE+B,UAAU,mDACVE,MAAO,CACLC,OAAO,GAAD,OAAK,KAA8B,IAAvB1B,EAAcH,KAAa,EAAImC,KAA3C,OAHV,UAME,sBAAKT,UAAU,gBAAf,UACE,sBAAMA,UAAU,4EAAhB,4BAGA,sBAAMA,UAAU,mEAAhB,mBAGA,sBAAMA,UAAU,kEAAhB,iBAGA,sBAAMA,UAAU,2EAAhB,iBAGA,sBAAMA,UAAU,2EAAhB,iBAGA,sBAAMA,UAAU,2EAAhB,oBAID/B,EAAYyC,KAAI,SAACC,EAAMC,GAAP,OACf,sBAEEZ,UAAU,wBACVE,MAAO,CACLC,OAAO,GAAD,OHhDS,GGgDUQ,EAAKvC,WH/CZ,EG+CZ,OAJV,UAOE,qBAAK4B,UAAU,yFAAf,SACE,sBAAMA,UAAU,GAAhB,SAAoBW,EAAK7B,SAE3B,qBAAKkB,UAAU,gFAAf,SACE,sBAAMA,UAAU,GAAhB,SAAoBW,EAAK1B,KAAKC,MAAM,OAAO,OAE7C,qBAAKc,UAAU,qEAAf,SACE,sBAAMA,UAAU,GAAhB,SAAoBW,EAAKzC,aAE3B,qBAAK8B,UAAU,+FACf,qBAAKA,UAAU,+FACf,qBAAKA,UAAU,iGAjBVY,UChCFC,G,MAAQ,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,WAAY9C,EAAkC,EAAlCA,SAAU+B,EAAwB,EAAxBA,MAC5C,OACE,qBAAKC,UAAU,oBAAf,SACE,sBAAKA,UAAU,2FAAf,UACE,cAAC,EAAD,CACEvB,cAAeqC,EAAWrC,cAC1BT,SAAUA,EACV+B,MAAOA,IAET,cAAC,EAAD,CACEtB,cAAeqC,EAAWrC,cAC1BR,YAAa6C,EAAW7C,cAE1B,cAAC,EAAD,CAAQQ,cAAeqC,EAAWrC,uBC1B7BsC,EAAS,CACpB,CAAEC,GAAI,EAAGlC,KAAM,SACf,CAAEkC,GAAI,EAAGlC,KAAM,eCMJmC,EAAU,SAAC,GAA0C,IAAxClB,EAAuC,EAAvCA,MAAOmB,EAAgC,EAAhCA,YAC/B,OACE,qBAAKlB,UAAU,2BAAf,SACE,sBAAKA,UAAU,YAAf,UACE,8CACA,wBAAQA,UAAU,YAAYmB,MAAOpB,EAAMiB,GAAII,SAAUF,EAAzD,SACGH,EAAOL,KAAI,SAACX,GAAD,OACV,wBAAuBoB,MAAOpB,EAAMiB,GAApC,SACGjB,EAAMjB,MADIiB,EAAMiB,eCblBK,EAAgB,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,yDACxBC,EAAQF,EAAUG,IAAI,SACtBT,EAAKM,EAAUG,IAAI,MACnBC,EAHwB,UAGVJ,EAAUG,IAAI,OAHJ,kBAGoBD,EAHpB,eAGgCR,GACxDW,EAAS,CACbC,QAAS,CACP,YAAaN,EAAUG,IAAI,SAG1BD,GAAUR,GAAOU,GAAaC,EATL,0EAWEE,MAAMH,EAAUC,GAXlB,+BAW2BG,OAX3B,WAYA,OADtBC,EAXsB,QAYfC,WAZe,wBAapBC,EAA6BF,EAAStD,cACtCyD,EAA0BH,EAAS9D,YACnCN,EAAe,CACnBc,cAAewD,EACfhE,YAAaiE,GAjBW,kBAmBnBvE,GAnBmB,0DAsB5BwE,QAAQC,IAAR,MAtB4B,0DAAH,sDCyDdC,G,KAjDH,WAAO,IAAD,EACUC,mBAAkBvB,EAAO,IADnC,mBACThB,EADS,KACFwC,EADE,OAEsBD,mBAA0B,IAFhD,mBAETxE,EAFS,KAEI0E,EAFJ,OAGgBF,mBAAiB,GAHjC,mBAGTtE,EAHS,KAGCyE,EAHD,KAKVC,EAAU,uCAAG,gCAAAnB,EAAA,6DACXI,EAAS,IAAIgB,gBAAgBC,OAAOC,SAASC,QADlC,SAEGzB,EAAiBM,GAFpB,UAEXhE,EAFW,wDAIXoF,EAAa,IAAIrF,EAAWC,GAClC6E,EAAeO,EAAWC,aAC1BP,EAAYM,EAAWhF,aANN,2CAAH,qDAkBhBkF,qBAAU,WACRP,MACC,IASH,OACE,gCACE,cAAC,EAAD,CAAS3C,MAAOA,EAAOmB,YATD,SAACgC,GACzB,IAAMC,EAAQC,OAAOF,EAAEG,OAAOlC,OACxBmC,EAAWvC,EAAOwC,MAAK,SAACxD,GAAD,OAAWA,EAAMiB,KAAOmC,KAChDG,GACLf,EAASe,MAMNxF,EAAY4C,KAAI,SAACI,EAAYF,GAAb,OACf,cAAC,EAAD,CAEEE,WAAYA,EACZ9C,SAAUA,EACV+B,MAAOA,GAHFa,WCnCA4C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7d0defd9.chunk.js","sourcesContent":["import { Order, OrderDetails, OrderLine } from \"./../types\";\nimport { LINE_HEIGHT, PADDING_HEIGHT } from \"./constants\";\n\nexport interface IOrderLineGrouped extends OrderLine {\n  lineHeight: number;\n}\n\nexport interface IOrderDetailsGrouped extends OrderDetails {\n  page: number;\n  totalPages: number;\n}\n\nexport interface IOrderGrouped {\n  order_details: IOrderDetailsGrouped;\n  order_lines: IOrderLineGrouped[];\n}\n\nexport interface IRowHandler {\n  MAX_HEIGHT_HEADER: number;\n  MAX_HEIGHT: number;\n  order: Order;\n  getGroups: () => IOrderGrouped[];\n}\n\n/**\n * this class handles the grouping of order lines into tables\n */\nexport class RowHandler implements IRowHandler {\n  MAX_HEIGHT_HEADER = 25 * 32;\n  MAX_HEIGHT = 29 * 32;\n  order: Order;\n  orderGroups: IOrderGrouped[] = [];\n  constructor(order: Order) {\n    this.order = order;\n  }\n\n  private getHeight(lineHeight: number) {\n    return LINE_HEIGHT * lineHeight + PADDING_HEIGHT;\n  }\n\n  getGroups() {\n    const MAX_DESC_WIDTH = 61;\n    const MAX_BRAND_WIDTH = 13;\n    const MAX_QTY_WIDTH = 4;\n\n    this.orderGroups = [];\n    let totalPages = 0;\n    let page = 1;\n    let accHeight = 0;\n    let currOrderGroup: IOrderGrouped = {\n      order_details: { ...this.order.order_details, page, totalPages: 0 },\n      order_lines: [],\n    };\n    for (const orderLine of this.order.order_lines) {\n      const descHeight = Math.ceil(orderLine.name.length / MAX_DESC_WIDTH);\n      const brandHeight = Math.ceil(\n        orderLine.cats.split(\" / \")[2].length / MAX_BRAND_WIDTH\n      );\n      const qtyHeight = Math.ceil(\n        String(orderLine.quantity).length / MAX_QTY_WIDTH\n      );\n      const lineHeight = Math.max(descHeight, brandHeight, qtyHeight);\n      const orderLineGroup: IOrderLineGrouped = {\n        ...orderLine,\n        lineHeight,\n      };\n      currOrderGroup.order_lines.push(orderLineGroup);\n      accHeight += this.getHeight(lineHeight);\n\n      const maxHeight =\n        this.orderGroups.length === 0\n          ? this.MAX_HEIGHT_HEADER\n          : this.MAX_HEIGHT;\n      if (accHeight > maxHeight) {\n        currOrderGroup.order_lines.pop();\n        this.orderGroups.push(currOrderGroup!);\n        // excedent\n        page++;\n        totalPages += 1;\n        accHeight = this.getHeight(orderLineGroup.lineHeight);\n        currOrderGroup = {\n          order_details: { ...this.order.order_details, page, totalPages: 0 },\n          order_lines: [orderLineGroup],\n        };\n      }\n    }\n    if (currOrderGroup.order_lines.length > 0) {\n      this.orderGroups.push(currOrderGroup);\n      totalPages += 1;\n    }\n    for (const orderGroup of this.orderGroups)\n      orderGroup.order_details.totalPages = totalPages;\n    return this.orderGroups;\n  }\n\n  getTotalQty = () => {\n    let totalQty = 0;\n    for (const line of this.order.order_lines) totalQty += line.quantity;\n    return totalQty;\n  };\n}\n","export const LINE_HEIGHT = 16;\nexport const PADDING_HEIGHT = 8;\nexport const HEADER_HEIGHT = 120;\n","import { IOrderDetailsGrouped } from \"../../logic/rowHandler\";\n\ninterface FooterProps {\n  order_details: IOrderDetailsGrouped;\n}\n\nexport const Footer = ({ order_details }: FooterProps) => {\n  return (\n    <div>\n      PÃ¡gina {order_details.page} de {order_details.totalPages}\n    </div>\n  );\n};\n","import { HEADER_HEIGHT } from \"../../logic/constants\";\nimport { IOrderDetailsGrouped } from \"../../logic/rowHandler\";\nimport { Catalog } from \"../../types\";\n\ninterface HeaderProps {\n  order_details: IOrderDetailsGrouped;\n  totalQty: number;\n  store: Catalog;\n}\n\nconst getFirstName = (fullName: string) => {\n  const nameWords = fullName.split(\" \");\n  if (nameWords.length > 2) return `${nameWords[0]} ${nameWords[1]}`;\n  return fullName;\n};\n\nexport const Header = ({ order_details, totalQty, store }: HeaderProps) => {\n  return (\n    <div className=\"border-b border-black border-dashed mb-2\">\n      <h2 className=\"text-lg font-semibold\">\n        <span>{order_details.name}</span>\n        &nbsp;|&nbsp;\n        <span>{order_details.datetime}</span>\n      </h2>\n      {order_details.page === 1 && (\n        <div className=\"uppercase\">\n          <div\n            className=\"w-1/2 inline-block pr-2\"\n            style={{ height: `${HEADER_HEIGHT}px` }}\n          >\n            <table className=\"w-full\">\n              <tbody>\n                <tr>\n                  <td className=\"text-right font-semibold\">Digitador: </td>\n                  <td>{getFirstName(order_details.username)}</td>\n                </tr>\n                <tr>\n                  <td className=\"text-right font-semibold\">Almacenero(s):</td>\n                  <td className=\"border-b border-black\"></td>\n                </tr>\n                <tr>\n                  <td className=\"text-right font-semibold\">Inicio: </td>\n                  <td>\n                    &nbsp;&nbsp;/&nbsp;&nbsp;/&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"text-right font-semibold\">Fin: </td>\n                  <td>\n                    &nbsp;&nbsp;/&nbsp;&nbsp;/&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div\n            className=\"w-1/2 inline-block pl-2\"\n            style={{ height: `${HEADER_HEIGHT}px` }}\n          >\n            <table>\n              <tbody>\n                <tr>\n                  <td colSpan={2} className=\"leading-[14px] break-all\">\n                    {order_details.partner_name}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"w-[150px] text-right font-semibold\">\n                    Factura:\n                  </td>\n                  <td>{order_details.partner_ref}</td>\n                </tr>\n                <tr>\n                  <td className=\"w-[150px] text-right font-semibold\">\n                    Cantidad Total:\n                  </td>\n                  <td>{totalQty}</td>\n                </tr>\n                <tr>\n                  <td className=\"w-[150px] text-right font-semibold\">\n                    Destino:\n                  </td>\n                  <td>{store.name}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  HEADER_HEIGHT,\n  LINE_HEIGHT,\n  PADDING_HEIGHT,\n} from \"../../logic/constants\";\nimport {\n  IOrderDetailsGrouped,\n  IOrderLineGrouped,\n} from \"../../logic/rowHandler\";\n\ninterface ListProps {\n  order_details: IOrderDetailsGrouped;\n  order_lines: IOrderLineGrouped[];\n}\n\nexport const List = ({ order_details, order_lines }: ListProps) => {\n  return (\n    <div\n      className=\"text-xs border-b border-black border-dashed mb-2\"\n      style={{\n        height: `${850 + (order_details.page === 1 ? 0 : HEADER_HEIGHT + 5)}px`,\n      }}\n    >\n      <div className=\"font-semibold\">\n        <span className=\"border-l border-t border-r border-b border-black p-1 inline-block w-[65%]\">\n          DESCRIPCIÃN\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[15%]\">\n          MARCA\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[5%]\">\n          CNT\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[calc(15%/3)]\">\n          ALM\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[calc(15%/3)]\">\n          VAL\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[calc(15%/3)]\">\n          OBS\n        </span>\n      </div>\n      {order_lines.map((line, idx) => (\n        <div\n          key={idx}\n          className=\"flex even:bg-gray-200\"\n          style={{\n            height: `${LINE_HEIGHT * line.lineHeight + PADDING_HEIGHT}px`,\n          }}\n        >\n          <div className=\"border-l border-r border-b border-black p-1 inline-flex items-center break-all w-[65%]\">\n            <span className=\"\">{line.name}</span>\n          </div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center break-all w-[15%]\">\n            <span className=\"\">{line.cats.split(\" / \")[2]}</span>\n          </div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center w-[5%]\">\n            <span className=\"\">{line.quantity}</span>\n          </div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center justify-center w-[calc(15%/3)]\"></div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center justify-center w-[calc(15%/3)]\"></div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center justify-center w-[calc(15%/3)]\"></div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { IOrderGrouped } from \"../../logic/rowHandler\";\nimport { Catalog } from \"../../types\";\nimport { Footer } from \"../Footer/Footer\";\nimport { Header } from \"../Header/Header\";\nimport { List } from \"../List/List\";\nimport \"./sheet.css\";\n\ninterface SheetProps {\n  orderGroup: IOrderGrouped;\n  totalQty: number;\n  store: Catalog;\n}\n\nexport const Sheet = ({ orderGroup, totalQty, store }: SheetProps) => {\n  return (\n    <div className=\"font-mono text-sm\">\n      <div className=\"sheet-page w-[210mm] h-[297mm] my-[10mm] mx-auto py-8 px-12 border border-black bg-white\">\n        <Header\n          order_details={orderGroup.order_details}\n          totalQty={totalQty}\n          store={store}\n        />\n        <List\n          order_details={orderGroup.order_details}\n          order_lines={orderGroup.order_lines}\n        />\n        <Footer order_details={orderGroup.order_details} />\n      </div>\n    </div>\n  );\n};\n","export const stores = [\n  { id: 1, name: \"abtao\" },\n  { id: 2, name: \"san martin\" },\n];\n","import { stores } from \"../../logic/stores\";\nimport { Catalog } from \"../../types\";\n\ninterface DestinyProps {\n  store: Catalog;\n  updateStore: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n}\n\nexport const Destiny = ({ store, updateStore }: DestinyProps) => {\n  return (\n    <div className=\"no-print px-12 mx-8 mt-2\">\n      <div className=\"font-mono\">\n        <label>DESTINO: </label>\n        <select className=\"uppercase\" value={store.id} onChange={updateStore}>\n          {stores.map((store) => (\n            <option key={store.id} value={store.id}>\n              {store.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n","import { Order, OrderDetails, OrderLine } from \"../types\";\n\nexport const getPurchaseOrder = async (urlParams: URLSearchParams) => {\n  const model = urlParams.get(\"model\");\n  const id = urlParams.get(\"id\");\n  const endpoint = `${urlParams.get(\"api\")}?model=${model}&id=${id}`;\n  const params = {\n    headers: {\n      \"x-api-key\": urlParams.get(\"key\")!,\n    },\n  };\n  if (!model || !id || !endpoint || !params) return;\n  try {\n    const response = await (await fetch(endpoint, params)).json();\n    if (response.statusCode === 200) {\n      const orderDetails: OrderDetails = response.order_details;\n      const orderLines: OrderLine[] = response.order_lines;\n      const order: Order = {\n        order_details: orderDetails,\n        order_lines: orderLines,\n      };\n      return order;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { IOrderGrouped, RowHandler } from \"./logic/rowHandler\";\nimport { Sheet } from \"./Components/Sheet/Sheet\";\nimport { Destiny } from \"./Components/Destiny/Destiny\";\nimport { useState } from \"react\";\nimport { Catalog } from \"./types\";\nimport { stores } from \"./logic/stores\";\nimport { useEffect } from \"react\";\nimport { getPurchaseOrder } from \"./logic/endpoint\";\nimport mock from \"./mock.json\";\n\nconst App = () => {\n  const [store, setStore] = useState<Catalog>(stores[0]);\n  const [orderGroups, setOrderGroups] = useState<IOrderGrouped[]>([]);\n  const [totalQty, setTotalQty] = useState<number>(0);\n\n  const fetchOrder = async () => {\n    const params = new URLSearchParams(window.location.search);\n    const order = await getPurchaseOrder(params);\n    if (!order) return;\n    const rowHandler = new RowHandler(order);\n    setOrderGroups(rowHandler.getGroups());\n    setTotalQty(rowHandler.getTotalQty);\n  };\n\n  const fetchOrderMock = () => {\n    const rowHandler = new RowHandler({\n      order_details: mock.order_details,\n      order_lines: mock.order_lines,\n    });\n    setOrderGroups(rowHandler.getGroups());\n    setTotalQty(rowHandler.getTotalQty);\n  };\n\n  useEffect(() => {\n    fetchOrder();\n  }, []);\n\n  const handleStoreUpdate = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newId = Number(e.target.value);\n    const newStore = stores.find((store) => store.id === newId);\n    if (!newStore) return;\n    setStore(newStore);\n  };\n\n  return (\n    <div>\n      <Destiny store={store} updateStore={handleStoreUpdate} />\n      {orderGroups.map((orderGroup, idx) => (\n        <Sheet\n          key={idx}\n          orderGroup={orderGroup}\n          totalQty={totalQty}\n          store={store}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}