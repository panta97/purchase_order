{"version":3,"sources":["logic/rowHandler.ts","logic/constants.ts","logic/utils.ts","Components/Footer/Footer.tsx","Components/Header/Header.tsx","Components/List/List.tsx","Components/Sheet/Sheet.tsx","logic/stores.ts","Components/Destiny/Destiny.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RowHandler","order","MAX_HEIGHT_HEADER","MAX_HEIGHT","orderGroups","getTotalQty","totalQty","order_lines","quantity","this","lineHeight","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","toSqlTime","Date","replace","totalPages","page","accHeight","currOrderGroup","order_details","orderLine","descHeight","Math","ceil","name","length","brandHeight","cats","split","qtyHeight","max","orderLineGroup","push","getHeight","pop","dateLocal","convertToLocalTZ","datetime","orderGroup","Footer","getFirstName","fullName","nameWords","Header","store","className","style","height","username","colSpan","partner_name","partner_ref","List","HEADER_HEIGHT","map","line","idx","Sheet","stores","id","Destiny","updateStore","value","onChange","App","useState","setStore","setOrderGroups","setTotalQty","useEffect","rowHandler","mock","getGroups","fetchOrderMock","e","newId","Number","target","newStore","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa5877de.chunk.js","sourcesContent":["import { Order, OrderDetails, OrderLine } from \"./../types\";\nimport { LINE_HEIGHT, PADDING_HEIGHT } from \"./constants\";\nimport { toSqlTime } from \"./utils\";\n\nexport interface IOrderLineGrouped extends OrderLine {\n  lineHeight: number;\n}\n\nexport interface IOrderDetailsGrouped extends OrderDetails {\n  page: number;\n  totalPages: number;\n}\n\nexport interface IOrderGrouped {\n  order_details: IOrderDetailsGrouped;\n  order_lines: IOrderLineGrouped[];\n}\n\nexport interface IRowHandler {\n  MAX_HEIGHT_HEADER: number;\n  MAX_HEIGHT: number;\n  order: Order;\n  getGroups: () => IOrderGrouped[];\n}\n\n/**\n * this class handles the grouping of order lines into tables\n */\nexport class RowHandler implements IRowHandler {\n  MAX_HEIGHT_HEADER = 25 * 32;\n  MAX_HEIGHT = 29 * 32;\n  order: Order;\n  orderGroups: IOrderGrouped[] = [];\n  constructor(order: Order) {\n    this.order = order;\n  }\n\n  private getHeight(lineHeight: number) {\n    return LINE_HEIGHT * lineHeight + PADDING_HEIGHT;\n  }\n\n  private convertToLocalTZ(date: string) {\n    // date is expected as \"2021-08-06 00:03:33\"\n    // debugger;\n    const dateObj = new Date(date.replace(\" \", \"T\") + \".000Z\");\n    return toSqlTime(dateObj);\n  }\n\n  getGroups() {\n    const MAX_DESC_WIDTH = 61;\n    const MAX_BRAND_WIDTH = 13;\n    const MAX_QTY_WIDTH = 4;\n\n    this.orderGroups = [];\n    let totalPages = 0;\n    let page = 1;\n    let accHeight = 0;\n    let currOrderGroup: IOrderGrouped = {\n      order_details: { ...this.order.order_details, page, totalPages: 0 },\n      order_lines: [],\n    };\n    for (const orderLine of this.order.order_lines) {\n      const descHeight = Math.ceil(orderLine.name.length / MAX_DESC_WIDTH);\n      const brandHeight = Math.ceil(\n        orderLine.cats.split(\" / \")[2].length / MAX_BRAND_WIDTH\n      );\n      const qtyHeight = Math.ceil(\n        String(orderLine.quantity).length / MAX_QTY_WIDTH\n      );\n      const lineHeight = Math.max(descHeight, brandHeight, qtyHeight);\n      const orderLineGroup: IOrderLineGrouped = {\n        ...orderLine,\n        lineHeight,\n      };\n      currOrderGroup.order_lines.push(orderLineGroup);\n      accHeight += this.getHeight(lineHeight);\n\n      const maxHeight =\n        this.orderGroups.length === 0\n          ? this.MAX_HEIGHT_HEADER\n          : this.MAX_HEIGHT;\n      if (accHeight > maxHeight) {\n        currOrderGroup.order_lines.pop();\n        this.orderGroups.push(currOrderGroup!);\n        // excedent\n        page++;\n        totalPages += 1;\n        accHeight = this.getHeight(orderLineGroup.lineHeight);\n        currOrderGroup = {\n          order_details: { ...this.order.order_details, page, totalPages: 0 },\n          order_lines: [orderLineGroup],\n        };\n      }\n    }\n    if (currOrderGroup.order_lines.length > 0) {\n      this.orderGroups.push(currOrderGroup);\n      totalPages += 1;\n    }\n    const dateLocal = this.convertToLocalTZ(this.order.order_details.datetime);\n    for (const orderGroup of this.orderGroups) {\n      orderGroup.order_details.datetime = dateLocal;\n      orderGroup.order_details.totalPages = totalPages;\n    }\n    return this.orderGroups;\n  }\n\n  getTotalQty = () => {\n    let totalQty = 0;\n    for (const line of this.order.order_lines) totalQty += line.quantity;\n    return totalQty;\n  };\n}\n","export const LINE_HEIGHT = 16;\nexport const PADDING_HEIGHT = 8;\nexport const HEADER_HEIGHT = 120;\n","export const toSqlTime = (date: Date) => {\n  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\n    2,\n    \"0\"\n  )}-${String(date.getDate()).padStart(2, \"0\")} ${String(\n    date.getHours()\n  ).padStart(2, \"0\")}:${String(date.getMinutes()).padStart(2, \"0\")}:${String(\n    date.getSeconds()\n  ).padStart(2, \"0\")}`;\n};\n","import { IOrderDetailsGrouped } from \"../../logic/rowHandler\";\n\ninterface FooterProps {\n  order_details: IOrderDetailsGrouped;\n}\n\nexport const Footer = ({ order_details }: FooterProps) => {\n  return (\n    <div>\n      Página {order_details.page} de {order_details.totalPages}\n    </div>\n  );\n};\n","import { HEADER_HEIGHT } from \"../../logic/constants\";\nimport { IOrderDetailsGrouped } from \"../../logic/rowHandler\";\nimport { Catalog } from \"../../types\";\n\ninterface HeaderProps {\n  order_details: IOrderDetailsGrouped;\n  totalQty: number;\n  store: Catalog;\n}\n\nconst getFirstName = (fullName: string) => {\n  const nameWords = fullName.split(\" \");\n  if (nameWords.length > 2) return `${nameWords[0]} ${nameWords[1]}`;\n  return fullName;\n};\n\nexport const Header = ({ order_details, totalQty, store }: HeaderProps) => {\n  return (\n    <div className=\"border-b border-black border-dashed mb-2\">\n      <h2 className=\"text-lg font-semibold\">\n        <span>{order_details.name}</span>\n        &nbsp;|&nbsp;\n        <span>{order_details.datetime}</span>\n      </h2>\n      {order_details.page === 1 && (\n        <div className=\"uppercase\">\n          <div\n            className=\"w-1/2 inline-block pr-2\"\n            style={{ height: `${HEADER_HEIGHT}px` }}\n          >\n            <table className=\"w-full\">\n              <tbody>\n                <tr>\n                  <td className=\"text-right font-semibold\">Digitador: </td>\n                  <td>{getFirstName(order_details.username)}</td>\n                </tr>\n                <tr>\n                  <td className=\"text-right font-semibold\">Almacenero(s):</td>\n                  <td className=\"border-b border-black\"></td>\n                </tr>\n                <tr>\n                  <td className=\"text-right font-semibold\">Inicio: </td>\n                  <td>\n                    &nbsp;&nbsp;/&nbsp;&nbsp;/&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"text-right font-semibold\">Fin: </td>\n                  <td>\n                    &nbsp;&nbsp;/&nbsp;&nbsp;/&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;:&nbsp;&nbsp;\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div\n            className=\"w-1/2 inline-block pl-2\"\n            style={{ height: `${HEADER_HEIGHT}px` }}\n          >\n            <table>\n              <tbody>\n                <tr>\n                  <td colSpan={2} className=\"leading-[14px] break-all\">\n                    {order_details.partner_name}\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"w-[150px] text-right font-semibold\">\n                    Factura:\n                  </td>\n                  <td>{order_details.partner_ref}</td>\n                </tr>\n                <tr>\n                  <td className=\"w-[150px] text-right font-semibold\">\n                    Cantidad Total:\n                  </td>\n                  <td>{totalQty}</td>\n                </tr>\n                <tr>\n                  <td className=\"w-[150px] text-right font-semibold\">\n                    Destino:\n                  </td>\n                  <td>{store.name}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  HEADER_HEIGHT,\n  LINE_HEIGHT,\n  PADDING_HEIGHT,\n} from \"../../logic/constants\";\nimport {\n  IOrderDetailsGrouped,\n  IOrderLineGrouped,\n} from \"../../logic/rowHandler\";\n\ninterface ListProps {\n  order_details: IOrderDetailsGrouped;\n  order_lines: IOrderLineGrouped[];\n}\n\nexport const List = ({ order_details, order_lines }: ListProps) => {\n  return (\n    <div\n      className=\"text-xs border-b border-black border-dashed mb-2\"\n      style={{\n        height: `${850 + (order_details.page === 1 ? 0 : HEADER_HEIGHT + 5)}px`,\n      }}\n    >\n      <div className=\"font-semibold\">\n        <span className=\"border-l border-t border-r border-b border-black p-1 inline-block w-[65%]\">\n          DESCRIPCIÓN\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[15%]\">\n          MARCA\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[5%]\">\n          CNT\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[calc(15%/3)]\">\n          ALM\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[calc(15%/3)]\">\n          VAL\n        </span>\n        <span className=\"border-t border-r border-b border-black p-1 inline-block w-[calc(15%/3)]\">\n          OBS\n        </span>\n      </div>\n      {order_lines.map((line, idx) => (\n        <div\n          key={idx}\n          className=\"flex even:bg-gray-200\"\n          style={{\n            height: `${LINE_HEIGHT * line.lineHeight + PADDING_HEIGHT}px`,\n          }}\n        >\n          <div className=\"border-l border-r border-b border-black p-1 inline-flex items-center break-all w-[65%]\">\n            <span className=\"\">{line.name}</span>\n          </div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center break-all w-[15%]\">\n            <span className=\"\">{line.cats.split(\" / \")[2]}</span>\n          </div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center w-[5%]\">\n            <span className=\"\">{line.quantity}</span>\n          </div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center justify-center w-[calc(15%/3)]\"></div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center justify-center w-[calc(15%/3)]\"></div>\n          <div className=\"border-r border-b border-black p-1 inline-flex items-center justify-center w-[calc(15%/3)]\"></div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { IOrderGrouped } from \"../../logic/rowHandler\";\nimport { Catalog } from \"../../types\";\nimport { Footer } from \"../Footer/Footer\";\nimport { Header } from \"../Header/Header\";\nimport { List } from \"../List/List\";\nimport \"./sheet.css\";\n\ninterface SheetProps {\n  orderGroup: IOrderGrouped;\n  totalQty: number;\n  store: Catalog;\n}\n\nexport const Sheet = ({ orderGroup, totalQty, store }: SheetProps) => {\n  return (\n    <div className=\"font-mono text-sm\">\n      <div className=\"sheet-page w-[210mm] h-[297mm] my-[10mm] mx-auto py-8 px-12 border border-black bg-white\">\n        <Header\n          order_details={orderGroup.order_details}\n          totalQty={totalQty}\n          store={store}\n        />\n        <List\n          order_details={orderGroup.order_details}\n          order_lines={orderGroup.order_lines}\n        />\n        <Footer order_details={orderGroup.order_details} />\n      </div>\n    </div>\n  );\n};\n","export const stores = [\n  { id: 1, name: \"abtao\" },\n  { id: 2, name: \"san martin\" },\n];\n","import { stores } from \"../../logic/stores\";\nimport { Catalog } from \"../../types\";\n\ninterface DestinyProps {\n  store: Catalog;\n  updateStore: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n}\n\nexport const Destiny = ({ store, updateStore }: DestinyProps) => {\n  return (\n    <div className=\"no-print px-12 mx-8 mt-2\">\n      <div className=\"font-mono\">\n        <label>DESTINO: </label>\n        <select className=\"uppercase\" value={store.id} onChange={updateStore}>\n          {stores.map((store) => (\n            <option key={store.id} value={store.id}>\n              {store.name}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n","import { IOrderGrouped, RowHandler } from \"./logic/rowHandler\";\nimport { Sheet } from \"./Components/Sheet/Sheet\";\nimport { Destiny } from \"./Components/Destiny/Destiny\";\nimport { useState } from \"react\";\nimport { Catalog } from \"./types\";\nimport { stores } from \"./logic/stores\";\nimport { useEffect } from \"react\";\nimport { getPurchaseOrder } from \"./logic/endpoint\";\nimport mock from \"./mock.json\";\n\nconst App = () => {\n  const [store, setStore] = useState<Catalog>(stores[0]);\n  const [orderGroups, setOrderGroups] = useState<IOrderGrouped[]>([]);\n  const [totalQty, setTotalQty] = useState<number>(0);\n\n  const fetchOrder = async () => {\n    const params = new URLSearchParams(window.location.search);\n    const order = await getPurchaseOrder(params);\n    if (!order) return;\n    document.title = order.order_details.name;\n    const rowHandler = new RowHandler(order);\n    setOrderGroups(rowHandler.getGroups());\n    setTotalQty(rowHandler.getTotalQty);\n  };\n\n  const fetchOrderMock = () => {\n    const rowHandler = new RowHandler({\n      order_details: mock.order_details,\n      order_lines: mock.order_lines,\n    });\n    setOrderGroups(rowHandler.getGroups());\n    setTotalQty(rowHandler.getTotalQty);\n  };\n\n  useEffect(() => {\n    fetchOrderMock();\n  }, []);\n\n  const handleStoreUpdate = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newId = Number(e.target.value);\n    const newStore = stores.find((store) => store.id === newId);\n    if (!newStore) return;\n    setStore(newStore);\n  };\n\n  return (\n    <div>\n      <Destiny store={store} updateStore={handleStoreUpdate} />\n      {orderGroups.map((orderGroup, idx) => (\n        <Sheet\n          key={idx}\n          orderGroup={orderGroup}\n          totalQty={totalQty}\n          store={store}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}